import os
import json
import numpy as np
import rasterio
from rasterio.windows import Window
from PIL import Image, ImageDraw
from shapely.geometry import shape, box, mapping, MultiPolygon, Polygon, MultiLineString, LineString, Point


def fix_invalid_geometry(geometry):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—É—é –≥–µ–æ–º–µ—Ç—Ä–∏—é."""
    if not geometry.is_valid:
        print("–ì–µ–æ–º–µ—Ç—Ä–∏—è –Ω–µ–≤–∞–ª–∏–¥–Ω–∞. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º...")
        geometry = geometry.buffer(0)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–µ–æ–º–µ—Ç—Ä–∏–∏
    return geometry


def is_single_color(image_array):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –æ–¥–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞."""
    return np.all(image_array == image_array[:, :, 0:1])


def get_bbox(x, y, tile_size, img_width, img_height):
    """–í—ã—á–∏—Å–ª—è–µ—Ç BBOX –≤ –ø–∏–∫—Å–µ–ª—è—Ö –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    x_min = x * tile_size
    y_min = y * tile_size
    x_max = min(x_min + tile_size, img_width)  # –ß—Ç–æ–±—ã –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç—å –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã
    y_max = min(y_min + tile_size, img_height)
    return [x_min, y_min, x_max, y_max]


def read_geojson(geojson_file):
    """–°—á–∏—Ç—ã–≤–∞–µ—Ç GeoJSON –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç shapely (–º—É–ª—å—Ç–∏–ø–æ–ª–∏–≥–æ–Ω)."""
    with open(geojson_file, "r", encoding="utf-8") as f:
        geojson_data = json.load(f)
    return fix_invalid_geometry(shape(geojson_data["features"][0]["geometry"]))


def save_label_studio(output_path, image_name, image_size, shapes):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Label Studio."""
    label_studio_data = [{
        "data": {"image": image_name},
        "annotations": [{
            "result": shapes,
            "meta": {"image_size": image_size}
        }]
    }]
    with open(output_path, "w", encoding="utf-8") as f:
        json.dump(label_studio_data, f, ensure_ascii=False, indent=4)


def split_tif_to_png(input_tif, geojson_file, output_folder, tile_size=256, server_url="http://localhost:12345/media"):
    """–†–∞–∑—Ä–µ–∑–∞–µ—Ç GeoTIFF, –≤—ã—á–∏—Å–ª—è–µ—Ç BBOX, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å GeoJSON."""
    os.makedirs(output_folder, exist_ok=True)

    # –û–±—â–∏–π —Å–ø–∏—Å–æ–∫ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π –¥–ª—è Label Studio
    all_annotations = []
    all_names = []

    # –ß–∏—Ç–∞–µ–º –º—É–ª—å—Ç–∏–ø–æ–ª–∏–≥–æ–Ω –∏–∑ GeoJSON
    multipolygon = read_geojson(geojson_file)

    annotations_path = os.path.join(output_folder, "annotations.json")
    names_path = os.path.join(output_folder, "names.json")

    with rasterio.open(input_tif) as src:
        cols, rows = src.width, src.height  # –†–∞–∑–º–µ—Ä—ã –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        grid_x = (cols + tile_size - 1) // tile_size  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —è—á–µ–µ–∫ –ø–æ —à–∏—Ä–∏–Ω–µ
        grid_y = (rows + tile_size - 1) // tile_size  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —è—á–µ–µ–∫ –ø–æ –≤—ã—Å–æ—Ç–µ

        total_tiles = grid_x * grid_y
        processed_tiles = 0  # –°—á—ë—Ç—á–∏–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —è—á–µ–µ–∫

        for y in range(grid_y):
            for x in range(grid_x):
                processed_tiles += 1
                # –í—ã–≤–æ–¥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                progress = (processed_tiles / total_tiles) * 100
                print(f"üìù –ü—Ä–æ–≥—Ä–µ—Å—Å: {processed_tiles}/{total_tiles} ({progress:.2f}%)")

                # –í—ã—á–∏—Å–ª—è–µ–º BBOX
                x_min = x * tile_size
                y_min = y * tile_size
                x_max = min(x_min + tile_size, cols)
                y_max = min(y_min + tile_size, rows)

                # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 256x256
                img = Image.new("RGBA", (tile_size, tile_size), (0, 0, 0, 0))

                # –ß–∏—Ç–∞–µ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                window = Window(x_min, y_min, x_max - x_min, y_max - y_min)
                tile = src.read(window=window)

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–∞—Å—Å–∏–≤ (H, W, C)
                tile_rgb = np.moveaxis(tile[:3], 0, -1)  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –∫–∞–Ω–∞–ª–∞ (RGB)

                if is_single_color(tile_rgb):
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–¥–Ω–æ—Ü–≤–µ—Ç–Ω—ã–µ —Ç–∞–π–ª—ã

                # –í—Å—Ç–∞–≤–ª—è–µ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç –≤ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                fragment = Image.fromarray(tile_rgb.astype(np.uint8))
                img.paste(fragment, (0, 0))

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞–π–ª
                output_subfolder = os.path.join(output_folder, f"{tile_size}", f"{x}")
                os.makedirs(output_subfolder, exist_ok=True)
                output_filename = os.path.join(output_subfolder, f"{tile_size}_{x}_{y}.png")
                img.save(output_filename, format="PNG")

                # –í—ã—á–∏—Å–ª—è–µ–º BBOX –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
                bbox = get_bbox(x, y, tile_size, cols, rows)
                bbox_polygon = box(*bbox)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º BBOX –≤ shapely Polygon

                try:
                    intersection = multipolygon.intersection(bbox_polygon)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞: {e}")
                    continue

                if intersection.is_empty:
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–∞–π–ª—ã –±–µ–∑ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è

                # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Label Studio
                shapes = []
                if intersection.geom_type == "Polygon":
                    coords = list(intersection.exterior.coords)
                    shapes.append({
                        "original_width": tile_size,
                        "original_height": tile_size,
                        "image_rotation": 0,
                        "value": {
                            "points": [[(px - bbox[0]) / tile_size * 100, (py - bbox[1]) / tile_size * 100] for px, py in coords],
                            "polygonlabels": ["Building"]
                        },
                        "id": f"polygon_{x}_{y}",
                        "from_name": "label",
                        "to_name": "image",
                        "type": "polygon"
                    })
                elif intersection.geom_type == "MultiPolygon":
                    for poly in intersection.geoms:
                        coords = list(poly.exterior.coords)
                        shapes.append({
                            "original_width": tile_size,
                            "original_height": tile_size,
                            "image_rotation": 0,
                            "value": {
                                "points": [[(px - bbox[0]) / tile_size * 100, (py - bbox[1]) / tile_size * 100] for px, py in coords],
                                "polygonlabels": ["Building"]
                            },
                            "id": f"polygon_{x}_{y}",
                            "from_name": "label",
                            "to_name": "image",
                            "type": "polygon"
                        })

                # –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É
                mask = Image.new("L", (tile_size, tile_size), 0)
                draw = ImageDraw.Draw(mask)
                if intersection.geom_type == "Polygon":
                    coords = [(px - bbox[0], py - bbox[1]) for px, py in intersection.exterior.coords]
                    draw.polygon(coords, outline=255, fill=255)
                elif intersection.geom_type == "MultiPolygon":
                    for poly in intersection.geoms:
                        coords = [(px - bbox[0], py - bbox[1]) for px, py in poly.exterior.coords]
                        draw.polygon(coords, outline=255, fill=255)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Å–∫—É
                mask_filename = os.path.join(output_subfolder, f"{tile_size}_{x}_{y}_m.png")
                mask.save(mask_filename)

                # –§–æ—Ä–º–∏—Ä—É–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é –¥–ª—è Label Studio
                url = f"{tile_size}/{x}/{tile_size}_{x}_{y}.png"
                annotation = {
                    "data": {"image": f"{server_url}/{url}"},
                    "annotations": [{
                        "result": shapes,
                        "meta": {"image_size": (tile_size, tile_size)}
                    }]
                }
                all_annotations.append(annotation)
                all_names.append(f"{tile_size}/{x}/{tile_size}_{x}_{y}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –∏ –∏–º–µ–Ω–∞
    with open(names_path, "w", encoding="utf-8") as f:
        json.dump(all_names, f, ensure_ascii=False, indent=4)

    with open(annotations_path, "w", encoding="utf-8") as f:
        json.dump(all_annotations, f, ensure_ascii=False, indent=4)

    print(f"üìÇ –í—Å–µ –∏–º–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {names_path}")
    print(f"üìÇ –í—Å–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {annotations_path}")


# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
input_tif = "1000.tif"
geojson_file = "output_pixels.geojson"
output_folder = "output"
split_tif_to_png(input_tif, geojson_file, output_folder, 256)

print("üéâ –†–∞–∑—Ä–µ–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")