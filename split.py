import os
import json
import numpy as np
import rasterio
from rasterio.windows import Window
from PIL import Image, ImageDraw
from shapely.geometry import shape, box, mapping, MultiPolygon, Polygon, MultiLineString, LineString, Point

def fix_invalid_geometry(geometry):
    if not geometry.is_valid:
        print("–ì–µ–æ–º–µ—Ç—Ä–∏—è –Ω–µ–≤–∞–ª–∏–¥–Ω–∞. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º...")
        # –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–º–µ—Ç—Ä–∏—é
        geometry = geometry.buffer(0)  # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –º–æ–∂–µ—Ç –∏—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –æ—à–∏–±–∫–∏
    return geometry

def is_single_color(image_array):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –æ–¥–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞"""
    return np.all(image_array == image_array[:, :, 0:1])  # –í—Å–µ –ø–∏–∫—Å–µ–ª–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ?

def get_bbox(x, y, tile_size, img_width, img_height):
    """–í—ã—á–∏—Å–ª—è–µ—Ç BBOX –≤ –ø–∏–∫—Å–µ–ª—è—Ö –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    x_min = x * tile_size
    y_min = y * tile_size
    x_max = min(x_min + tile_size, img_width)  # –ß—Ç–æ–±—ã –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç—å –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã
    y_max = min(y_min + tile_size, img_height)
    return [x_min, y_min, x_max, y_max]

def read_geojson(geojson_file):
    """–°—á–∏—Ç—ã–≤–∞–µ—Ç GeoJSON –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç shapely (–º—É–ª—å—Ç–∏–ø–æ–ª–∏–≥–æ–Ω)"""
    with open(geojson_file, "r", encoding="utf-8") as f:
        geojson_data = json.load(f)
    return fix_invalid_geometry(shape(geojson_data["features"][0]["geometry"]))

def save_label_studio(output_path, image_name, image_size, shapes):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Label Studio"""
    label_studio_data = [{
        "data": {"image": image_name},
        "annotations": [{
            "result": shapes,
            "meta": {"image_size": image_size}
        }]
    }]
    with open(output_path, "w", encoding="utf-8") as f:
        json.dump(label_studio_data, f, ensure_ascii=False, indent=4)


def split_tif_to_png(input_tif, geojson_file, output_folder, tile_size=256, server_url="http://localhost:12345/media"):
    """–†–∞–∑—Ä–µ–∑–∞–µ—Ç GeoTIFF, –≤—ã—á–∏—Å–ª—è–µ—Ç BBOX, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å GeoJSON"""
    os.makedirs(output_folder, exist_ok=True)

    # –û–±—â–∏–π —Å–ø–∏—Å–æ–∫ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π –¥–ª—è Label Studio
    all_annotations = []

    all_names = []

    # –ß–∏—Ç–∞–µ–º –º—É–ª—å—Ç–∏–ø–æ–ª–∏–≥–æ–Ω –∏–∑ GeoJSON
    multipolygon = read_geojson(geojson_file)



    annotations_path = os.path.join(output_folder, "annotations.json")
    names_path= os.path.join(output_folder, "names.json")

    with rasterio.open(input_tif) as src:
        cols, rows = src.width, src.height  # –†–∞–∑–º–µ—Ä—ã –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        grid_x = cols // tile_size  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —è—á–µ–µ–∫ –ø–æ —à–∏—Ä–∏–Ω–µ
        grid_y = rows // tile_size  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —è—á–µ–µ–∫ –ø–æ –≤—ã—Å–æ—Ç–µ

        total_tiles = grid_x * grid_y
        processed_tiles = 0  # –°—á—ë—Ç—á–∏–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —è—á–µ–µ–∫

        for y in range(grid_y):
            for x in range(grid_x):

                processed_tiles += 1
                # –í—ã–≤–æ–¥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                progress = (processed_tiles / total_tiles) * 100
                print(f"üìù –ü—Ä–æ–≥—Ä–µ—Å—Å: {processed_tiles}/{total_tiles} ({progress:.2f}%)")

                window = Window(x * tile_size, y * tile_size, tile_size, tile_size)
                tile = src.read(window=window)

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–∞—Å—Å–∏–≤ (H, W, C)
                tile_rgb = np.moveaxis(tile[:3], 0, -1)  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –∫–∞–Ω–∞–ª–∞ (RGB)

                if is_single_color(tile_rgb):
                    # print(f"üö´ –ü—Ä–æ–ø—É—â–µ–Ω {x}_{y} (–æ–¥–Ω–æ—Ü–≤–µ—Ç–Ω—ã–π)")
                    continue

                # –°–æ–∑–¥–∞–µ–º PNG-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                img = Image.fromarray(tile_rgb.astype(np.uint8))

                output_subfolder = os.path.join(output_folder, f"{tile_size}", f"{x}")

                url = f"{tile_size}/{x}/{tile_size}_{x}_{y}.png"

                # –ò–º—è —Ñ–∞–π–ª–∞
                output_filename = os.path.join(output_subfolder, f"{tile_size}_{x}_{y}.png")


                # –í—ã—á–∏—Å–ª—è–µ–º BBOX
                bbox = get_bbox(x, y, tile_size, cols, rows)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å GeoJSON
                bbox_polygon = box(*bbox)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º BBOX –≤ shapely Polygon

                try:
                    intersection = multipolygon.intersection(bbox_polygon)
                except Exception  as e:
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
                    print(f"–û—à–∏–±–∫–∞: {e}")
                    continue

                if intersection.is_empty:
                    # print(f"üö´ –ü—Ä–æ–ø—É—â–µ–Ω {x}_{y} (–Ω–µ—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è)")
                    continue

                os.makedirs(output_subfolder, exist_ok=True)
                img.save(output_filename, format="PNG")


                # üîπ –õ–æ–≥–∏—Ä—É–µ–º WKT –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
                # print(f"üîç –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è {x}_{y}: {intersection.wkt}")

                # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Label Studio
                shapes = []
                if intersection.geom_type == "Polygon":
                    coords = list(intersection.exterior.coords)
                    shapes.append({
                        "original_width": tile_size,
                        "original_height": tile_size,
                        "image_rotation": 0,
                        "value": {
                            "points": [[(x - bbox[0]) / tile_size * 100, (y - bbox[1]) / tile_size * 100] for x, y in
                                       coords],
                            "polygonlabels": ["Building"]
                        },
                        "id": f"polygon_{x}_{y}",
                        "from_name": "label",
                        "to_name": "image",
                        "type": "polygon"
                    })
                elif intersection.geom_type == "MultiPolygon":
                    for poly in intersection.geoms:
                        coords = list(poly.exterior.coords)
                        shapes.append({
                            "original_width": tile_size,
                            "original_height": tile_size,
                            "image_rotation": 0,
                            "value": {
                                "points": [[(x - bbox[0]) / tile_size * 100, (y - bbox[1]) / tile_size * 100] for x, y
                                           in coords],
                                "polygonlabels": ["Tracks"]
                            },
                            "id": f"polygon_{x}_{y}",
                            "from_name": "label",
                            "to_name": "image",
                            "type": "polygon"
                        })
                elif intersection.geom_type == "Point":
                    # print(f"‚ö†Ô∏è –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –¥–ª—è {x}_{y} - —ç—Ç–æ —Ç–æ—á–∫–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º.")
                    continue
                elif intersection.geom_type == "LineString":
                    # print(f"‚ö†Ô∏è –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –¥–ª—è {x}_{y} - —ç—Ç–æ –ª–∏–Ω–∏—è, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º.")
                    continue

                mask = Image.new("L", (tile_size, tile_size), 0)  # Create blank mask
                draw = ImageDraw.Draw(mask)

                if intersection.geom_type == "Polygon":
                    coords =  [(px - bbox[0], py - bbox[1]) for px, py in intersection.exterior.coords]
                    # print(f"Mask: {coords}")
                    draw.polygon(coords, outline=255, fill=255)
                elif intersection.geom_type == "MultiPolygon":
                    for poly in intersection.geoms:
                        coords = [(px - bbox[0], py - bbox[1]) for px, py in poly.exterior.coords]
                        # print(f"Mask: {coords}")
                        draw.polygon(coords, outline=255, fill=255)

                mask_filename = os.path.join(output_subfolder, f"{tile_size}_{x}_{y}_m.png")
                mask.save(mask_filename)
                # print(f"Saved mask: {mask_filename}")

                annotation = {
                    "data": {"image": f"{server_url}/{url}"},
                    "annotations": [{
                        "result": shapes,
                        "meta": {"image_size": (tile_size, tile_size)}
                    }]
                }

                all_annotations.append(annotation)

                all_names.append(f"{tile_size}/{x}/{tile_size}_{x}_{y}")

                # print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω {output_filename}")

                # with open(annotations_path, "w", encoding="utf-8") as f:
                #     json.dump(all_annotations, f, ensure_ascii=False, indent=4)

                # return



    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ Label Studio

    with open(names_path, "w", encoding="utf-8") as f:
        json.dump(all_names, f, ensure_ascii=False, indent=4)

    print(f"üìÇ –í—Å–µ –∏–º–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {names_path}")

    with open(annotations_path, "w", encoding="utf-8") as f:
        json.dump(all_annotations, f, ensure_ascii=False, indent=4)

    print(f"üìÇ –í—Å–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {annotations_path}")


            # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
input_tif = "result.tif"
geojson_file = "pixel2.geojson"
output_folder = "output"
split_tif_to_png(input_tif, geojson_file, output_folder, 256)

print("üéâ –†–∞–∑—Ä–µ–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
