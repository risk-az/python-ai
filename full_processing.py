import os
import gc
import torch
import numpy as np
import rasterio
from rasterio.windows import Window
import torchvision.transforms as T
import torchvision.models as models
from PIL import Image
from tqdm import tqdm

def is_single_color(image_array):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–¥–Ω–æ—Ü–≤–µ—Ç–Ω—ã–π –ª–∏ —Ç–∞–π–ª (image_array: (H, W, 3)).
    –ï—Å–ª–∏ –≤—Å–µ –ø–∏–∫—Å–µ–ª–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç –ø–æ –≤—Å–µ–º –∫–∞–Ω–∞–ª–∞–º ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True.
    """
    return np.all(image_array == image_array[..., :1])

def preprocess_tile(tile_rgb):
    """
    –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º NumPy-–º–∞—Å—Å–∏–≤ (H, W, 3) –≤ —Ç–µ–Ω–∑–æ—Ä (1,3,256,256) –¥–ª—è –º–æ–¥–µ–ª–∏.
    """
    transform = T.Compose([
        T.Resize((256, 256)),
        T.ToTensor(),
        T.Normalize(mean=[0.485, 0.456, 0.406],
                    std=[0.229, 0.224, 0.225])
    ])
    pil_img = Image.fromarray(tile_rgb)
    return transform(pil_img).unsqueeze(0).to(device)

def to_red_mask(output_tensor):
    """
    –ò–∑ –≤—ã—Ö–æ–¥–∞ –º–æ–¥–µ–ª–∏ (–ª–æ–≥–∏—Ç—ã, shape: (1,1,256,256)) –¥–µ–ª–∞–µ–º –±–∏–Ω–∞—Ä–Ω—É—é –º–∞—Å–∫—É (0 –∏–ª–∏ 255).
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º 3-–∫–∞–Ω–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤ (shape: (3, 256, 256)), –≥–¥–µ:
      - –ö—Ä–∞—Å–Ω—ã–π –∫–∞–Ω–∞–ª = –º–∞—Å–∫–∞ (0 –∏–ª–∏ 255)
      - –ó–µ–ª—ë–Ω—ã–π –∫–∞–Ω–∞–ª = 0
      - –°–∏–Ω–∏–π –∫–∞–Ω–∞–ª   = 0
    """
    # –°–∏–≥–º–æ–∏–¥–∞ + –ø–æ—Ä–æ–≥
    output = torch.sigmoid(output_tensor).squeeze().cpu().numpy()  # (256, 256)
    bin_mask = (output > 0.5).astype(np.uint8) * 255  # 0 –∏–ª–∏ 255

    # –§–æ—Ä–º–∏—Ä—É–µ–º 3 –∫–∞–Ω–∞–ª–∞
    red_channel = bin_mask
    green_channel = np.zeros_like(bin_mask, dtype=np.uint8)
    blue_channel = np.zeros_like(bin_mask, dtype=np.uint8)

    # –§–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤: (3, 256, 256)
    return np.stack([red_channel, green_channel, blue_channel], axis=0)

if __name__ == "__main__":
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    print(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}")

    # –ü—Ä–∏–º–µ—Ä: –≥—Ä—É–∑–∏–º –º–æ–¥–µ–ª—å DeepLabV3 —Å 1 –≤—ã—Ö–æ–¥–Ω—ã–º –∫–∞–Ω–∞–ª–æ–º
    model = models.segmentation.deeplabv3_resnet101(weights=None, num_classes=1)
    checkpoint = torch.load("deeplabv3_model_epoch_300.pth", map_location=device)
    filtered_checkpoint = {k: v for k, v in checkpoint.items() if "aux_classifier" not in k}
    model.load_state_dict(filtered_checkpoint, strict=False)
    model.to(device)
    model.eval()

    input_folder = "./input"
    output_folder = "./output"
    os.makedirs(output_folder, exist_ok=True)

    tile_size = 256  # –†–∞–∑–º–µ—Ä —Ç–∞–π–ª–∞, —Å –∫–æ—Ç–æ—Ä—ã–º –±—É–¥–µ–º —á–∏—Ç–∞—Ç—å

    for tif_file in sorted(os.listdir(input_folder)):
        if tif_file.endswith(".tif"):
            base_name = os.path.splitext(tif_file)[0]
            tif_path = os.path.join(input_folder, tif_file)

            # –ü–∞–ø–∫–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ TIFF
            out_dir = os.path.join(output_folder, base_name)
            os.makedirs(out_dir, exist_ok=True)

            # –ò—Ç–æ–≥–æ–≤—ã–π PNG: output/tif_name/tif_name_mask.png
            out_png_path = os.path.join(out_dir, f"{base_name}_mask.png")

            print(f"\n–û–±—Ä–∞–±–æ—Ç–∫–∞ {tif_file} -> {out_png_path}")

            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤—Ö–æ–¥–Ω–æ–π TIFF
            with rasterio.open(tif_path) as src:
                cols, rows = src.width, src.height

                # –°–æ–∑–¥–∞—ë–º –±–æ–ª—å—à–æ–π –∏—Ç–æ–≥–æ–≤—ã–π –º–∞—Å—Å–∏–≤ (rows, cols, 3), –≥–¥–µ –±—É–¥–µ—Ç –∫—Ä–∞—Å–Ω–∞—è –º–∞—Å–∫–∞
                # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —á—ë—Ä–Ω—ã–π —Ñ–æ–Ω (–≤—Å–µ –Ω—É–ª–∏)
                final_array = np.zeros((rows, cols, 3), dtype=np.uint8)

                # –í—ã—á–∏—Å–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ —Ç–∞–π–ª–æ–≤ –ø–æ X –∏ Y
                grid_x = (cols + tile_size - 1) // tile_size
                grid_y = (rows + tile_size - 1) // tile_size

                total_tiles = grid_x * grid_y
                with tqdm(total=total_tiles, desc="–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–ª–æ–≤", leave=True) as pbar:
                    for ty in range(grid_y):
                        for tx in range(grid_x):
                            x_min = tx * tile_size
                            y_min = ty * tile_size
                            x_max = min(x_min + tile_size, cols)
                            y_max = min(y_min + tile_size, rows)

                            # –ß–∏—Ç–∞–µ–º –æ–∫–Ω–æ (window) –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ TIFF
                            window = Window(x_min, y_min,
                                            x_max - x_min,
                                            y_max - y_min)
                            tile = src.read([1, 2, 3], window=window)  # (3, H, W)
                            tile_rgb = np.moveaxis(tile, 0, -1)        # (H, W, 3)

                            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–¥–Ω–æ—Ü–≤–µ—Ç–Ω–æ—Å—Ç–∏
                            if is_single_color(tile_rgb):
                                # –ï—Å–ª–∏ —Ç–∞–π–ª –æ–¥–Ω–æ—Ü–≤–µ—Ç–Ω—ã–π ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –º–æ–¥–µ–ª—å, –æ—Å—Ç–∞–≤–ª—è–µ–º —á—ë—Ä–Ω—ã–π
                                pbar.update(1)
                                continue

                            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ç–µ–Ω–∑–æ—Ä
                            tile_tensor = preprocess_tile(tile_rgb)

                            # –ü—Ä–æ–≥–æ–Ω—è–µ–º —á–µ—Ä–µ–∑ –º–æ–¥–µ–ª—å
                            with torch.no_grad():
                                output = model(tile_tensor)["out"]  # (1,1,256,256)

                            # –ü–æ–ª—É—á–∞–µ–º 3-–∫–∞–Ω–∞–ª—å–Ω—É—é –∫—Ä–∞—Å–Ω—É—é –º–∞—Å–∫—É
                            mask_3ch = to_red_mask(output)  # (3, 256, 256)

                            # –ù–∞ –≥—Ä–∞–Ω–∏—Ü–∞—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 256√ó256 ‚Äî –æ–±—Ä–µ–∂–µ–º –º–∞—Å–∫—É
                            tile_width = x_max - x_min
                            tile_height = y_max - y_min
                            if tile_width < tile_size or tile_height < tile_size:
                                mask_3ch = mask_3ch[:, :tile_height, :tile_width]

                            # mask_3ch: (3, tileH, tileW)
                            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ (tileH, tileW, 3), —á—Ç–æ–±—ã –≤—Å—Ç–∞–≤–∏—Ç—å –≤ final_array
                            mask_3ch_hw = np.moveaxis(mask_3ch, 0, -1)  # (tileH, tileW, 3)

                            # –í—Å—Ç–∞–≤–ª—è–µ–º –º–∞—Å–∫—É –≤ –∏—Ç–æ–≥–æ–≤—ã–π –º–∞—Å—Å–∏–≤
                            final_array[y_min:y_max, x_min:x_max, :] = mask_3ch_hw

                            # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å
                            del tile, tile_rgb, tile_tensor, output, mask_3ch, mask_3ch_hw
                            gc.collect()
                            if device.type == 'cuda':
                                torch.cuda.empty_cache()

                            pbar.update(1)

            # –ö–æ–≥–¥–∞ –≤—Å–µ —Ç–∞–π–ª—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ç–æ–≥ –≤ PNG
            final_img = Image.fromarray(final_array, mode='RGB')
            final_img.save(out_png_path)
            print(f"‚úÖ PNG —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {out_png_path}")

    print("\nüéâ –í—Å–µ —Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!")
